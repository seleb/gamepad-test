{"version":3,"sources":["useGamepad.js","DoubleAxis.jsx","Button.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useRaf","fn","useEffect","raf","loopfn","requestAnimationFrame","cancelAnimationFrame","useAxis","axis","_useState","useState","_useState2","Object","slicedToArray","v","set","val","gamepads","getAxis","init","loop","update","DoubleAxis","_ref","axisX","axisY","x","y","react_default","a","createElement","className","type","readOnly","value","style","top","concat","left","Button","button","isDown","btn","_useState3","_useState4","useButton","App","src_DoubleAxis","LSTICK_H","LSTICK_V","RSTICK_H","RSTICK_V","Array","fill","map","_","idx","src_Button","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAWO,SAASA,EAAOC,GACtBC,oBAAU,WACT,IAAIC,EAMJ,OALA,SAASC,IACRH,IACAE,EAAME,sBAAsBD,GAE7BA,GACO,kBAAME,qBAAqBH,KAChC,CAACF,IASE,SAASM,EAAQC,GAAM,IAAAC,EACZC,mBAAS,GADGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACnBI,EADmBJ,EAAA,GAM7B,OAJAX,EAAO,WACN,IAAMgB,EAAMC,IAASC,QAAQV,GAC7BO,EAAIC,KAEEF,EAhCRG,IAASE,OAET,SAASC,IACRH,IAASI,SACThB,sBAAsBe,GAEvBA,GCWeE,MAjBR,SAAAC,GAGJ,IAFFC,EAEED,EAFFC,MACAC,EACEF,EADFE,MAEMC,EAAInB,EAAQiB,GACZG,EAAIpB,EAAQkB,GAClB,OACCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,wBAAgBN,EAAhB,MAAyBI,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,UAAQ,EAACC,MAAOR,KAC9DE,EAAAC,EAAAC,cAAA,wBAAgBL,EAAhB,MAAyBG,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,UAAQ,EAACC,MAAOP,KAC9DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaI,MAAO,CAAEC,IAAG,GAAAC,OAAe,KAATV,EAAE,EAAE,IAAV,KAAuBW,KAAI,GAAAD,OAAe,KAATX,EAAE,EAAE,IAAV,WCJvDa,MAPR,SAAAhB,GAEJ,IADFiB,EACEjB,EADFiB,OAEMC,EFgCA,SAAmBC,GAAK,IAAAC,EACbjC,oBAAS,GADIkC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA+B,EAAA,GACvB7B,EADuB8B,EAAA,GACpB7B,EADoB6B,EAAA,GAM9B,OAJA5C,EAAO,WACN,IAAMgB,EAAMC,IAASwB,OAAOC,GAC5B3B,EAAIC,KAEEF,EEtCQ+B,CAAUL,GACzB,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAS,UAAAM,OAAYI,EAAS,OAAS,KAA5C,UAA0DD,EAA1D,IAAmEC,EAAS,OAAS,OCc9EK,MAdf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACiB,EAAD,CAAYvB,MAAOP,IAAS+B,SAAUvB,MAAOR,IAASgC,WACtDrB,EAAAC,EAAAC,cAACiB,EAAD,CAAYvB,MAAOP,IAASiC,SAAUzB,MAAOR,IAASkC,YAExDvB,EAAAC,EAAAC,cAAA,eACG,IAAIsB,MAAM,IAAIC,KAAK,GAAGC,IAAI,SAACC,EAAGC,GAAJ,OAAY5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAQC,IAAKF,EAAKhB,OAAQgB,SCHrDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78047cff.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport gamepads from 'input-gamepads.js';\r\n\r\ngamepads.init();\r\n\r\nfunction loop() {\r\n\tgamepads.update();\r\n\trequestAnimationFrame(loop);\r\n}\r\nloop();\r\n\r\nexport function useRaf(fn) {\r\n\tuseEffect(() => {\r\n\t\tlet raf;\r\n\t\tfunction loopfn() {\r\n\t\t\tfn();\r\n\t\t\traf = requestAnimationFrame(loopfn);\r\n\t\t}\r\n\t\tloopfn();\r\n\t\treturn () => cancelAnimationFrame(raf);\r\n\t}, [fn]);\r\n}\r\n\r\nexport function useGamepad() {\r\n\tuseEffect(() => {\r\n\t\tgamepads.init();\r\n\t}, []);\r\n}\r\n\r\nexport function useAxis(axis) {\r\n\tconst [v, set] = useState(0);\r\n\tuseRaf(() => {\r\n\t\tconst val = gamepads.getAxis(axis);\r\n\t\tset(val);\r\n\t});\r\n\treturn v;\r\n}\r\n\r\nexport function useButton(btn) {\r\n\tconst [v, set] = useState(false);\r\n\tuseRaf(() => {\r\n\t\tconst val = gamepads.isDown(btn);\r\n\t\tset(val);\r\n\t});\r\n\treturn v;\r\n}\r\n","import React from 'react';\r\nimport { useAxis } from './useGamepad';\r\n\r\nexport function DoubleAxis({\r\n\taxisX,\r\n\taxisY,\r\n}) {\r\n\tconst x = useAxis(axisX);\r\n\tconst y = useAxis(axisY);\r\n\treturn (\r\n\t\t<div className=\"axis\">\r\n\t\t<label>x (axis {axisX}): <input type=\"number\" readOnly value={x} /></label>\r\n\t\t<label>y (axis {axisY}): <input type=\"number\" readOnly value={y} /></label>\r\n\t\t<div className=\"axis-square\">\r\n\t\t\t<div className=\"axis-point\" style={{ top: `${(y/2+0.5)*100}%`, left: `${(x/2+0.5)*100}%`}} />\r\n\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DoubleAxis;\r\n","import React from 'react';\r\nimport { useButton } from './useGamepad';\r\n\r\nexport function Button({\r\n\tbutton,\r\n}) {\r\n\tconst isDown = useButton(button);\r\n\treturn <div className={`button ${isDown ? 'down' : ''}`}>button {button} {isDown ? 'down' : 'up'}</div>;\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport gamepads from 'input-gamepads.js';\nimport './App.scss';\nimport DoubleAxis from './DoubleAxis';\nimport Button from './Button';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <section>\n        <DoubleAxis axisX={gamepads.LSTICK_H} axisY={gamepads.LSTICK_V} />\n        <DoubleAxis axisX={gamepads.RSTICK_H} axisY={gamepads.RSTICK_V} />\n      </section>\n      <section>\n        {new Array(16).fill(0).map((_, idx) => <Button key={idx} button={idx} />)}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}