{"version":3,"sources":["useGamepad.js","Axis.jsx","DoubleAxis.jsx","Button.jsx","App.jsx","serviceWorker.js","index.js"],"names":["gamepads","Gamepads","useRaf","fn","useEffect","raf","loopfn","requestAnimationFrame","cancelAnimationFrame","useAxis","axis","useState","v","set","val","getAxis","loop","update","Button","name","className","type","readOnly","value","min","max","step","DoubleAxis","axisX","axisY","x","y","style","top","left","button","isDown","btn","useButton","readonly","checked","App","Axes","LSTICK_H","LSTICK_V","RSTICK_H","RSTICK_V","Object","entries","slice","values","length","map","Axis","key","Buttons","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAGA,MAAMA,EAAW,IAAIC,IAQd,SAASC,EAAOC,GACtBC,oBAAU,KACT,IAAIC,EAMJ,OALA,SAASC,IACRH,IACAE,EAAME,sBAAsBD,GAE7BA,GACO,IAAME,qBAAqBH,IAChC,CAACF,IAGE,SAASM,EAAQC,GAAO,MAAD,EACZC,mBAAS,GADG,mBACtBC,EADsB,KACnBC,EADmB,KAM7B,OAJAX,EAAO,KACN,MAAMY,EAAMd,EAASe,QAAQL,GAC7BG,EAAIC,KAEEF,GAxBR,SAASI,IACRhB,EAASiB,SACTV,sBAAsBS,GAEvBA,GCIeE,MAVR,UAAgB,KACtBC,EADsB,KAEtBT,IAEA,MAAME,EAAIH,EAAQC,GAClB,OACC,2BAAOU,UAAU,QAAQD,EAAzB,KAAgC,2BAAOE,KAAK,QAAQC,UAAQ,EAACC,MAAOX,EAAGY,KAAM,EAAGC,IAAK,EAAGC,KAAM,QCWjFC,MAjBR,UAAoB,MAC1BC,EAD0B,MAE1BC,IAEA,MAAMC,EAAIrB,EAAQmB,GACZG,EAAItB,EAAQoB,GAClB,OACC,yBAAKT,UAAU,eACf,0CAAgBQ,EAAhB,MAAyB,2BAAOP,KAAK,SAASC,UAAQ,EAACC,MAAOO,KAC9D,0CAAgBD,EAAhB,MAAyB,2BAAOR,KAAK,SAASC,UAAQ,EAACC,MAAOQ,KAC9D,yBAAKX,UAAU,eACd,yBAAKA,UAAU,aAAaY,MAAO,CAAEC,IAAI,GAAD,OAAe,KAATF,EAAE,EAAE,IAAV,KAAuBG,KAAK,GAAD,OAAe,KAATJ,EAAE,EAAE,IAAV,WCHvDZ,MARR,UAAgB,KACtBC,EADsB,OAEtBgB,IAEA,MAAMC,EHyBA,SAAmBC,GAAM,MAAD,EACb1B,oBAAS,GADI,mBACvBC,EADuB,KACpBC,EADoB,KAM9B,OAJAX,EAAO,KACN,MAAMY,EAAMd,EAASoC,OAAOC,GAC5BxB,EAAIC,KAEEF,EG/BQ0B,CAAUH,GACzB,OAAO,2BAAOf,UAAU,UAAUD,EAA3B,KAAkC,2BAAOE,KAAK,WAAWkB,UAAQ,EAACC,QAASJ,MCkBpEK,MAlBf,WAEE,OACE,yBAAKrB,UAAU,OACb,6BAASA,UAAU,uBACjB,kBAAC,EAAD,CAAYQ,MAAOc,IAAKC,SAAUd,MAAOa,IAAKE,WAC9C,kBAAC,EAAD,CAAYhB,MAAOc,IAAKG,SAAUhB,MAAOa,IAAKI,YAEhD,6BAAS1B,UAAU,gBAChB2B,OAAOC,QAAQN,KAAMO,MAAMF,OAAOG,OAAOR,KAAMS,OAAO,GAAGC,IAAI,EAAEjC,EAAMI,KAAW,kBAAC8B,EAAD,CAAMC,IAAK/B,EAAOJ,KAAMA,EAAMT,KAAMa,MAEvH,6BAASH,UAAU,kBAChB2B,OAAOC,QAAQO,KAASN,MAAMF,OAAOG,OAAOK,KAASJ,OAAO,GAAGC,IAAI,EAAEjC,EAAMI,KAAW,kBAAC,EAAD,CAAQ+B,IAAK/B,EAAOJ,KAAMA,EAAMgB,OAAQZ,QCRnHiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.9e5840c4.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Gamepads } from 'input-gamepads.js';\n\nconst gamepads = new Gamepads();\n\nfunction loop() {\n\tgamepads.update();\n\trequestAnimationFrame(loop);\n}\nloop();\n\nexport function useRaf(fn) {\n\tuseEffect(() => {\n\t\tlet raf;\n\t\tfunction loopfn() {\n\t\t\tfn();\n\t\t\traf = requestAnimationFrame(loopfn);\n\t\t}\n\t\tloopfn();\n\t\treturn () => cancelAnimationFrame(raf);\n\t}, [fn]);\n}\n\nexport function useAxis(axis) {\n\tconst [v, set] = useState(0);\n\tuseRaf(() => {\n\t\tconst val = gamepads.getAxis(axis);\n\t\tset(val);\n\t});\n\treturn v;\n}\n\nexport function useButton(btn) {\n\tconst [v, set] = useState(false);\n\tuseRaf(() => {\n\t\tconst val = gamepads.isDown(btn);\n\t\tset(val);\n\t});\n\treturn v;\n}\n","import React from 'react';\nimport { useAxis } from './useGamepad';\n\nexport function Button({\n\tname,\n\taxis,\n}) {\n\tconst v = useAxis(axis);\n\treturn (\n\t\t<label className=\"axis\">{name}: <input type=\"range\" readOnly value={v} min={-1} max={1} step={0.01} /></label>\n\t);\n}\n\nexport default Button;\n","import React from 'react';\nimport { useAxis } from './useGamepad';\n\nexport function DoubleAxis({\n\taxisX,\n\taxisY,\n}) {\n\tconst x = useAxis(axisX);\n\tconst y = useAxis(axisY);\n\treturn (\n\t\t<div className=\"double-axis\">\n\t\t<label>x (axis {axisX}): <input type=\"number\" readOnly value={x} /></label>\n\t\t<label>y (axis {axisY}): <input type=\"number\" readOnly value={y} /></label>\n\t\t<div className=\"axis-square\">\n\t\t\t<div className=\"axis-point\" style={{ top: `${(y/2+0.5)*100}%`, left: `${(x/2+0.5)*100}%`}} />\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default DoubleAxis;\n","import React from 'react';\nimport { useButton } from './useGamepad';\n\nexport function Button({\n\tname,\n\tbutton,\n}) {\n\tconst isDown = useButton(button);\n\treturn <label className=\"button\">{name}: <input type=\"checkbox\" readonly checked={isDown} /></label>;\n}\n\nexport default Button;\n","import React from 'react';\nimport { Axes, Buttons } from 'input-gamepads.js';\nimport './App.scss';\nimport Axis from './Axis';\nimport DoubleAxis from './DoubleAxis';\nimport Button from './Button';\n\n\nfunction App()\n{\n  return (\n    <div className=\"app\">\n      <section className=\"section-double-axis\">\n        <DoubleAxis axisX={Axes.LSTICK_H} axisY={Axes.LSTICK_V} />\n        <DoubleAxis axisX={Axes.RSTICK_H} axisY={Axes.RSTICK_V} />\n      </section>\n      <section className=\"section-axis\">\n        {Object.entries(Axes).slice(Object.values(Axes).length/2).map(([name, value]) => <Axis key={value} name={name} axis={value} />)}\n      </section>\n      <section className=\"section-button\">\n        {Object.entries(Buttons).slice(Object.values(Buttons).length/2).map(([name, value]) => <Button key={value} name={name} button={value} />)}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}